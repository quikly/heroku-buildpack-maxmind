#!/usr/bin/env bash
set -eo pipefail

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

source "$(dirname "${0}")/support/bash_functions.sh"

# Setup paths
VENDOR_DIR="$BUILD_DIR/vendor"
MAXMIND_CACHE_DIR="$CACHE_DIR/maxmind"
MAXMIND_EDITIONS=${MAXMIND_EDITIONS:-"GeoLite2-Country"}

# Create .profile.d directory
PROFILE_DIR="$BUILD_DIR/.profile.d"
mkdir -p "$PROFILE_DIR"

# Create the profile script with support for multiple DBs
cat <<EOF >"$PROFILE_DIR/maxmind-defaults.sh"
#!/usr/bin/env bash

# Base directory for all MaxMind databases
export MAXMIND_DB_DIR=\${MAXMIND_DB_DIR:-\$HOME/vendor}

# List of installed editions
export MAXMIND_EDITIONS=\${MAXMIND_EDITIONS:-"$MAXMIND_EDITIONS"}

# Individual database paths (for convenience)
EOF

# Add each edition's path to the profile script
for edition in $MAXMIND_EDITIONS; do
  # Convert edition name to uppercase env var name (e.g., GeoLite2-City -> MAXMIND_GEOLITE2_CITY_PATH)
  env_name="MAXMIND_$(echo "$edition" | tr '[:lower:]-' '[:upper:]_')_PATH"
  echo "export $env_name=\${$env_name:-\$MAXMIND_DB_DIR/$edition.mmdb}" >>"$PROFILE_DIR/maxmind-defaults.sh"
done

step "Created .profile.d/maxmind-defaults.sh"

step "Setting up MaxMind GeoIP2"

# Create necessary directories
mkdir -p "$VENDOR_DIR"
mkdir -p "$MAXMIND_CACHE_DIR"

# Get MaxMind credentials from environment
if [ -d "$ENV_DIR" ]; then
  if [ -f "$ENV_DIR/MAXMIND_LICENSE_KEY" ] && [ -f "$ENV_DIR/MAXMIND_ACCOUNT_ID" ]; then
    MAXMIND_LICENSE_KEY=$(cat "$ENV_DIR/MAXMIND_LICENSE_KEY")
    MAXMIND_ACCOUNT_ID=$(cat "$ENV_DIR/MAXMIND_ACCOUNT_ID")
  else
    step "MaxMind credentials not found - skipping GeoIP database installation"
    exit 0
  fi
fi

download_database() {
  local edition=$1
  local download_url="https://download.maxmind.com/geoip/databases/${edition}/download?suffix=tar.gz"
  local temp_dir=$(mktemp -d)

  step "Downloading ${edition} database..."
  local output_file="$temp_dir/${edition}.tar.gz"

  if ! curl -sL \
            --user "$MAXMIND_ACCOUNT_ID:$MAXMIND_LICENSE_KEY" \
            --output "$output_file" \
            "$download_url"; then
    error "Download failed for ${edition}"
    rm -rf "$temp_dir"
    return 1
  fi

  step "Extracting database from $(basename "$output_file")..."
  if ! tar -xzf "$output_file" -C "$temp_dir"; then
    error "Extraction failed for ${edition}"
    rm -rf "$temp_dir"
    return 1
  fi

  # Get the extracted directory name (should include the date)
  local extracted_dir=$(find "$temp_dir" -mindepth 1 -maxdepth 1 -type d -name "${edition}_*" | head -n1)
  if [ -z "$extracted_dir" ]; then
    error "Could not find extracted directory for ${edition}"
    rm -rf "$temp_dir"
    return 1
  fi

  local version_dir=$(basename "$extracted_dir")
  step "Installing new version ${version_dir}..."

  # Store versioned directory in cache (for version checking in subsequent builds)
  rm -rf "${MAXMIND_CACHE_DIR:?}/${edition}_"*
  mv "$extracted_dir" "$MAXMIND_CACHE_DIR/$version_dir"

  # Copy the database file to vendor directory (for runtime use)
  cp "$MAXMIND_CACHE_DIR/$version_dir/${edition}.mmdb" "$VENDOR_DIR/${edition}.mmdb"

  rm -rf "$temp_dir"
  step_succeeded "Successfully installed ${edition} database"
  return 0
}

# Main logic
for edition in $MAXMIND_EDITIONS; do
  if should_download "$edition"; then
    if ! download_database "$edition"; then
      if [ -f "$MAXMIND_CACHE_DIR/$edition.mmdb" ]; then
        step "Download failed, using cached version of ${edition}"
        # Copy cached version to vendor dir
        cp "$MAXMIND_CACHE_DIR/$edition.mmdb" "$VENDOR_DIR/$edition.mmdb"
      else
        error "Failed to install ${edition} database and no cache available"
        exit 1
      fi
    fi
  else
    step "Using cached version of ${edition}"
    # Get the most recent cached version directory
    cached_dir=$(find "${MAXMIND_CACHE_DIR}" -maxdepth 1 -type d -name "${edition}_*" | sort -r | head -n1)
    # Copy from the versioned directory to vendor
    cp "$cached_dir/${edition}.mmdb" "$VENDOR_DIR/${edition}.mmdb"
  fi
done

step_succeeded "MaxMind GeoIP2 installation complete"

