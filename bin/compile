#!/usr/bin/env bash
set -eo pipefail

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

source "$(dirname "${0}")/support/bash_functions.sh"

# Setup paths
VENDOR_DIR="$BUILD_DIR/vendor"
MAXMIND_CACHE_DIR="$CACHE_DIR/maxmind"
MAXMIND_EDITIONS=${MAXMIND_EDITIONS:-"GeoLite2-Country"}

# Create .profile.d directory
PROFILE_DIR="$BUILD_DIR/.profile.d"
mkdir -p "$PROFILE_DIR"

# Create the profile script with support for multiple DBs
cat <<EOF >"$PROFILE_DIR/maxmind-defaults.sh"
#!/usr/bin/env bash

# Base directory for all MaxMind databases
export MAXMIND_DB_DIR=\${MAXMIND_DB_DIR:-\$HOME/vendor}

# List of installed editions
export MAXMIND_EDITIONS=\${MAXMIND_EDITIONS:-"$MAXMIND_EDITIONS"}

# Individual database paths (for convenience)
EOF

# Add each edition's path to the profile script
for edition in $MAXMIND_EDITIONS; do
  # Convert edition name to uppercase env var name (e.g., GeoLite2-City -> MAXMIND_GEOLITE2_CITY_PATH)
  env_name="MAXMIND_$(echo "$edition" | tr '[:lower:]-' '[:upper:]_')_PATH"
  echo "export $env_name=\${$env_name:-\$MAXMIND_DB_DIR/$edition.mmdb}" >>"$PROFILE_DIR/maxmind-defaults.sh"
done

step "Created .profile.d/maxmind-defaults.sh"

step "Setting up MaxMind GeoIP2"

# Create necessary directories
mkdir -p "$VENDOR_DIR"
mkdir -p "$MAXMIND_CACHE_DIR"

# Get MaxMind credentials from environment
if [ -d "$ENV_DIR" ]; then
  if [ -f "$ENV_DIR/MAXMIND_LICENSE_KEY" ] && [ -f "$ENV_DIR/MAXMIND_ACCOUNT_ID" ]; then
    MAXMIND_LICENSE_KEY=$(cat "$ENV_DIR/MAXMIND_LICENSE_KEY")
    MAXMIND_ACCOUNT_ID=$(cat "$ENV_DIR/MAXMIND_ACCOUNT_ID")
  else
    step "MaxMind credentials not found - skipping GeoIP database installation"
    exit 0
  fi
fi

download_database() {
  local edition=$1
  local download_url="https://download.maxmind.com/geoip/databases/${edition}/download?suffix=tar.gz"
  local temp_dir=$(mktemp -d)

  step "Downloading ${edition} database..."
  wget --quiet \
       --content-disposition \
       --directory-prefix="$temp_dir" \
       --user="$MAXMIND_ACCOUNT_ID" \
       --password="$MAXMIND_LICENSE_KEY" \
       "$download_url"

  if [ $? -ne 0 ]; then
    error "Download failed for ${edition}"
    rm -rf "$temp_dir"
    return 1
  fi

  # Get the versioned directory name from the archive
  local archive_name=$(ls "$temp_dir")
  local version_dir=$(basename "$archive_name" .tar.gz)

  step "Extracting database from $archive_name..."
  if ! tar -xzf "$temp_dir/$archive_name" -C "$temp_dir"; then
    error "Extraction failed for ${edition}"
    rm -rf "$temp_dir"
    return 1
  fi

  step "Installing new version ${version_dir}..."

  # Store versioned directory in cache (for version checking in subsequent builds)
  rm -rf "${MAXMIND_CACHE_DIR:?}/${edition}_"*
  mv "$temp_dir/$version_dir" "$MAXMIND_CACHE_DIR/$version_dir"

  # Copy the database file to vendor directory (for runtime use)
  cp "$MAXMIND_CACHE_DIR/$version_dir/${edition}.mmdb" "$VENDOR_DIR/${edition}.mmdb"

  rm -rf "$temp_dir"
  step_succeeded "Successfully installed ${edition} database"
  return 0
}

should_download() {
  local edition=$1
  local download_url="https://download.maxmind.com/geoip/databases/${edition}/download?suffix=tar.gz"

  # Check if any version of this edition exists in cache
  if ! ls "${MAXMIND_CACHE_DIR}/${edition}_"* >/dev/null 2>&1; then
    return 0
  fi

  step "Checking for updates to ${edition} database..."

  # Get remote file info using wget HEAD request
  local headers
  headers=$(wget -S --method HEAD \
                   --quiet \
                   --user="$MAXMIND_ACCOUNT_ID" \
                   --password="$MAXMIND_LICENSE_KEY" \
                   "$download_url" 2>&1)

  if [ $? -ne 0 ]; then
    step "Failed to check for updates, using cached version"
    return 1
  fi

  # Extract date from Content-Disposition filename (YYYYMMDD format)
  local remote_date=$(echo "$headers" | grep -i 'content-disposition' | grep -o '[0-9]\{8\}')
  if [ -z "$remote_date" ]; then
    step "Could not determine remote version date, using cached version"
    return 1
  fi

  # Get local file's timestamp from the cached directory name
  local cached_dir=$(ls -t "${MAXMIND_CACHE_DIR}/${edition}_"* | head -n1)
  local local_date=$(basename "$cached_dir" | grep -o '[0-9]\{8\}')

  if [ -z "$local_date" ]; then
    step "Could not determine local version date, downloading new version"
    return 0
  fi

  if [ "$remote_date" -gt "$local_date" ]; then
    step "New version available (local: ${local_date}, remote: ${remote_date})"
    return 0
  fi

  step "Local database is up to date (${local_date})"
  return 1
}

# Main logic
for edition in $MAXMIND_EDITIONS; do
  if should_download "$edition"; then
    if ! download_database "$edition"; then
      if [ -f "$MAXMIND_CACHE_DIR/$edition.mmdb" ]; then
        step "Download failed, using cached version of ${edition}"
        # Copy cached version to vendor dir
        cp "$MAXMIND_CACHE_DIR/$edition.mmdb" "$VENDOR_DIR/$edition.mmdb"
      else
        error "Failed to install ${edition} database and no cache available"
        exit 1
      fi
    fi
  else
    step "Using cached version of ${edition}"
    # Get the most recent cached version directory
    cached_dir=$(ls -t "${MAXMIND_CACHE_DIR}/${edition}_"* | head -n1)
    # Copy from the versioned directory to vendor
    cp "$cached_dir/${edition}.mmdb" "$VENDOR_DIR/${edition}.mmdb"
  fi
done

step_succeeded "MaxMind GeoIP2 installation complete"
